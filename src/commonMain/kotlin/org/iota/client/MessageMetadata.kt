// Automatically generated by flapigen
package org.iota.client

import kotlin.jvm.Synchronized

/**
 * Response of GET /api/v1/messages/{message_id}/metadata.
 * Returns the metadata of a message.
 */
class MessageMetadata {
    override fun equals(obj: Any?): Boolean {
        var equal = false
        if (obj is MessageMetadata) equal = obj.rustEq(this)
        return equal
    }

    override fun hashCode(): Int {
        return mNativeObj.toInt()
    }

    override fun toString(): String {
        run { return this.to_string() }
    }

    private constructor() {}

    private fun to_string(): String {
        return do_to_string(mNativeObj)
    }

    private fun rustEq(o: MessageMetadata): Boolean {
        val a0 = o.mNativeObj
        val ret = do_rustEq(mNativeObj, a0)
        //TODO  java.lang.ref.Reference.reachabilityFence(o)
        return ret
    }

    /**
     * The message id of this message
     */
    fun messageId(): String {
        return do_messageId(mNativeObj)
    }

    /**
     * The ids of the parents of this message
     */
    fun parentMessageIds(): Array<String> {
        return do_parentMessageIds(mNativeObj)
    }

    /**
     * IF this message is solid
     */
    val isSolid: Boolean
        get() = do_isSolid(mNativeObj)

    /**
     * The optional milestone index if this message is referenced
     */
    fun referencedByMilestoneIndex(): Long {
        return do_referencedByMilestoneIndex(mNativeObj)
    }

    /**
     * The optional milestone index this was included in
     */
    fun milestoneIndex(): Long {
        return do_milestoneIndex(mNativeObj)
    }

    /**
     * The ledger state
     */
    fun ledgerInclusionState(): LedgerInclusionStateDto? {
        val ret = do_ledgerInclusionState(mNativeObj)
        val convRet: LedgerInclusionStateDto? = if (ret != -1) {
            LedgerInclusionStateDto.fromInt(ret)
        } else {
            null
        }
        return convRet
    }

    /**
     * The optional reason of conflict
     */
    fun conflictReason(): Int {
        return do_conflictReason(mNativeObj)
    }

    /**
     * Optional; if the message needs to be promoted
     */
    fun shouldPromote(): Boolean? {
        val ret = do_shouldPromote(mNativeObj)
        val convRet: Boolean? = if (ret.toInt() == -1) {
            null
        } else {
            ret.toInt() == 1
        }
        return convRet
    }

    /**
     * Optional; if the message needs to be reattached
     */
    fun shouldReattach(): Boolean? {
        val ret = do_shouldReattach(mNativeObj)
        val convRet: Boolean? = if (ret.toInt() == -1) {
            null
        } else {
            ret.toInt() == 1
        }
        return convRet
    }

    @Synchronized
    fun delete() {
        if (mNativeObj != 0L) {
            do_delete(mNativeObj)
            mNativeObj = 0
        }
    }

    @Throws(Throwable::class)
    protected fun finalize() {
        try {
            delete()
        } finally {
            //super.finalize()
        }
    }

    /*package*/
    internal constructor(marker: InternalPointerMarker, ptr: Long) {
        check(marker === InternalPointerMarker.RAW_PTR)
        mNativeObj = ptr
    }

    /*package*/
    var mNativeObj: Long = 0

    companion object {
        private external fun do_to_string(self: Long): String
        private external fun do_rustEq(self: Long, o: Long): Boolean
        private external fun do_messageId(self: Long): String
        private external fun do_parentMessageIds(self: Long): Array<String>
        private external fun do_isSolid(self: Long): Boolean
        private external fun do_referencedByMilestoneIndex(self: Long): Long
        private external fun do_milestoneIndex(self: Long): Long
        private external fun do_ledgerInclusionState(self: Long): Int
        private external fun do_conflictReason(self: Long): Int
        private external fun do_shouldPromote(self: Long): Short
        private external fun do_shouldReattach(self: Long): Short
        private external fun do_delete(me: Long)
    }
}