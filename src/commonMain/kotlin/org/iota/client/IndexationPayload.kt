// Automatically generated by flapigen
package org.iota.client

import kotlin.jvm.Synchronized

class IndexationPayload {
    override fun toString(): String {
        run { return this.to_string() }
    }

    private constructor() {}

    private fun to_string(): String {
        return do_to_string(mNativeObj)
    }

    /**
     * Serializes the indexation payload into a json string
     */
    fun serialize(): String {
        return do_serialize(mNativeObj)
    }

    /**
     * Returns the index of an `IndexationPayload`.
     */
    fun index(): ByteArray {
        return do_index(mNativeObj)
    }

    fun indexString(): String {
        return do_indexString(mNativeObj)
    }

    /**
     * Returns the data of an `IndexationPayload`.
     */
    fun data(): ByteArray {
        return do_data(mNativeObj)
    }

    fun dataString(): String {
        return do_dataString(mNativeObj)
    }

    @Synchronized
    fun delete() {
        if (mNativeObj != 0L) {
            do_delete(mNativeObj)
            mNativeObj = 0
        }
    }

    @Throws(Throwable::class)
    protected fun finalize() {
        try {
            delete()
        } finally {
           // super.finalize()
        }
    }

    /*package*/
    internal constructor(marker: InternalPointerMarker, ptr: Long) {
        check(marker === InternalPointerMarker.RAW_PTR)
        mNativeObj = ptr
    }

    /*package*/
    var mNativeObj: Long = 0

    companion object {
        private external fun do_to_string(self: Long): String
        private external fun do_serialize(self: Long): String

        /**
         * Turns a serialized indexation payload string back into its class
         */
        fun deserialize(serialised_data: String): IndexationPayload {
            val ret = do_deserialize(serialised_data)
            return IndexationPayload(InternalPointerMarker.RAW_PTR, ret)
        }

        private external fun do_deserialize(serialised_data: String): Long

        /**
         * Creates a new `IndexationPayload`.
         * @param index The index
         * @param data The data linked ot this index
         */
        fun fromBytes(index: ByteArray, data: ByteArray): IndexationPayload {
            val ret = do_fromBytes(index, data)
            return IndexationPayload(InternalPointerMarker.RAW_PTR, ret)
        }

        private external fun do_fromBytes(index: ByteArray, data: ByteArray): Long

        /**
         * Creates a new `IndexationPayload` from strings
         * @param index The index
         * @param data The data linked ot this index
         */
        fun fromStrings(index: String, data: String): IndexationPayload {
            val ret = do_fromStrings(index, data)
            return IndexationPayload(InternalPointerMarker.RAW_PTR, ret)
        }

        private external fun do_fromStrings(index: String, data: String): Long
        private external fun do_index(self: Long): ByteArray
        private external fun do_indexString(self: Long): String
        private external fun do_data(self: Long): ByteArray
        private external fun do_dataString(self: Long): String
        private external fun do_delete(me: Long)
    }
}