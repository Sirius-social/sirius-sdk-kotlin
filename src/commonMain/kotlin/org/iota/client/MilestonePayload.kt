// Automatically generated by flapigen
package org.iota.client

import kotlin.jvm.Synchronized

/**
 * A payload which defines the inclusion set of other messages in the Tangle.
 */
class MilestonePayload {
    override fun toString(): String {
        run { return this.to_string() }
    }

    private constructor() {}

    private fun to_string(): String {
        return do_to_string(mNativeObj)
    }

    /**
     * Returns the essence of a `MilestonePayload`.
     */
    fun essence(): org.iota.client.MilestonePayloadEssence {
        val ret = do_essence(mNativeObj)
        return org.iota.client.MilestonePayloadEssence(InternalPointerMarker.RAW_PTR, ret)
    }

    /**
     * Returns the signatures of a `MilestonePayload`.
     */
    fun signatures(): Array<org.iota.client.MilestoneSignature> {
        return do_signatures(mNativeObj)
    }

    /**
     * Semantically validate a `MilestonePayload`.
     * @param applicable_public_keys The public keys to use to validate
     * @param min_threshold THe minimum threshold for this to succeed (0...100)
     */
    fun validate(applicable_public_keys: Array<String>, min_threshold: Long) {
        do_validate(mNativeObj, applicable_public_keys, min_threshold)
    }

    /**
     * Computes the identifier of a `MilestonePayload`.
     */
    fun id(): String {
        return do_id(mNativeObj)
    }

    @Synchronized
    fun delete() {
        if (mNativeObj != 0L) {
            do_delete(mNativeObj)
            mNativeObj = 0
        }
    }

    @Throws(Throwable::class)
    protected fun finalize() {
        try {
            delete()
        } finally {
       //     super.finalize()
        }
    }

    /*package*/
    internal constructor(marker: InternalPointerMarker, ptr: Long) {
        check(marker === InternalPointerMarker.RAW_PTR)
        mNativeObj = ptr
    }

    /*package*/
    var mNativeObj: Long = 0

    companion object {
        private external fun do_to_string(self: Long): String
        private external fun do_essence(self: Long): Long
        private external fun do_signatures(self: Long): Array<org.iota.client.MilestoneSignature>
        private external fun do_validate(
            self: Long,
            applicable_public_keys: Array<String>,
            min_threshold: Long
        )

        private external fun do_id(self: Long): String
        private external fun do_delete(me: Long)
    }
}